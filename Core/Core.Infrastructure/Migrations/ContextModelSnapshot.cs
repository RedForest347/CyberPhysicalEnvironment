// <auto-generated />
using System;
using Core.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Core.Infrastructure.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Domain.Agent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AgentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RegisterTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgentTypeId");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("Core.Domain.AgentType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AgentTypes");
                });

            modelBuilder.Entity("Core.Domain.Link", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ActiveLinkFlag")
                        .HasColumnType("bit");

                    b.Property<bool>("Agent1Checked")
                        .HasColumnType("bit");

                    b.Property<Guid>("Agent1Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Agent2Checked")
                        .HasColumnType("bit");

                    b.Property<Guid>("Agent2Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CheckedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CloseTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LinkTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RequestTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Agent1Id");

                    b.HasIndex("Agent2Id");

                    b.HasIndex("LinkTypeId");

                    b.ToTable("Links");
                });

            modelBuilder.Entity("Core.Domain.LinkType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LinkTypes");
                });

            modelBuilder.Entity("Core.Domain.Agent", b =>
                {
                    b.HasOne("Core.Domain.AgentType", "AgentType")
                        .WithMany("Agents")
                        .HasForeignKey("AgentTypeId");

                    b.Navigation("AgentType");
                });

            modelBuilder.Entity("Core.Domain.Link", b =>
                {
                    b.HasOne("Core.Domain.Agent", "Agent1")
                        .WithMany("OutputLinks")
                        .HasForeignKey("Agent1Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domain.Agent", "Agent2")
                        .WithMany("InputLinks")
                        .HasForeignKey("Agent2Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domain.LinkType", "LinkType")
                        .WithMany("Links")
                        .HasForeignKey("LinkTypeId");

                    b.Navigation("Agent1");

                    b.Navigation("Agent2");

                    b.Navigation("LinkType");
                });

            modelBuilder.Entity("Core.Domain.Agent", b =>
                {
                    b.Navigation("InputLinks");

                    b.Navigation("OutputLinks");
                });

            modelBuilder.Entity("Core.Domain.AgentType", b =>
                {
                    b.Navigation("Agents");
                });

            modelBuilder.Entity("Core.Domain.LinkType", b =>
                {
                    b.Navigation("Links");
                });
#pragma warning restore 612, 618
        }
    }
}
